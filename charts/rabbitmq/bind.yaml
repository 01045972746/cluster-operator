template: |
  local ingressFilterFunc(j) = std.length(std.findSubstr("rabbitmq-ingress", j.name)) > 0;
  local ingress = std.filter(ingressFilterFunc, $.services);
  local secretFilterFunc(j) = std.length(std.findSubstr("rabbitmq-admin", j.name)) > 0;
  local admin = std.filter(secretFilterFunc, $.secrets);

  local vhost = "%2F";
  local ingressIP = if ingress[0].spec.type == "LoadBalancer" then ingress[0].status.loadBalancer.ingress[0].ip else ingress[0].spec.clusterIP;
  local adminUsername = admin[0].data['rabbitmq-username'];
  local adminPassword = admin[0].data['rabbitmq-password'];
  local mgmtURI = "http://" + ingressIP + ":15672/#/login/" + adminUsername + "/" + adminPassword;
  local apiURI = "http://" + adminUsername + ":" + adminPassword + "@" + ingressIP + ":15672/api/";
  local amqpURI = "amqp://" + adminUsername + ":" + adminPassword + "@" + ingressIP + "/" + vhost;
  {
    "hostname": ingressIP,
    "username": adminUsername,
    "password": adminPassword,
    "dashboard_url": mgmtURI,
    "hostnames": [
      ingressIP
    ],
    "http_api_uri": apiURI,
    "http_api_uris": [
      apiURI
    ],
    "ssl": false,
    "uri": amqpURI,
    "uris": [
      amqpURI
    ],
    "vhost": vhost,
    "protocols": {
      "amqp": {
        "host": ingressIP,
        "hosts": [
          ingressIP
        ],
        "password": adminPassword,
        "port": 5672,
        "ssl": false,
        "uri": amqpURI,
        "uris": [
          amqpURI
        ],
        "username": adminUsername,
        "vhost": vhost
      },
      "management": {
        "host": ingressIP,
        "hosts": [
          ingressIP
        ],
        "password": adminPassword,
        "path": "/api/",
        "port": 15672,
        "ssl": false,
        "uri": apiURI,
        "uris": [
          apiURI
        ],
        "username": adminUsername
      }
    },
  }
