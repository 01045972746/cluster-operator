// Code generated by counterfeiter. DO NOT EDIT.
package resourcemanagerfakes

import (
	"sync"

	"github.com/pivotal/rabbitmq-for-kubernetes/pkg/apis/rabbitmq/v1beta1"
	generator "github.com/pivotal/rabbitmq-for-kubernetes/pkg/internal/resourcegenerator"
	"github.com/pivotal/rabbitmq-for-kubernetes/pkg/internal/resourcemanager"
)

type FakeResourceManager struct {
	ConfigureStub        func(*v1beta1.RabbitmqCluster) ([]generator.TargetResource, error)
	configureMutex       sync.RWMutex
	configureArgsForCall []struct {
		arg1 *v1beta1.RabbitmqCluster
	}
	configureReturns struct {
		result1 []generator.TargetResource
		result2 error
	}
	configureReturnsOnCall map[int]struct {
		result1 []generator.TargetResource
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceManager) Configure(arg1 *v1beta1.RabbitmqCluster) ([]generator.TargetResource, error) {
	fake.configureMutex.Lock()
	ret, specificReturn := fake.configureReturnsOnCall[len(fake.configureArgsForCall)]
	fake.configureArgsForCall = append(fake.configureArgsForCall, struct {
		arg1 *v1beta1.RabbitmqCluster
	}{arg1})
	fake.recordInvocation("Configure", []interface{}{arg1})
	fake.configureMutex.Unlock()
	if fake.ConfigureStub != nil {
		return fake.ConfigureStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.configureReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeResourceManager) ConfigureCallCount() int {
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	return len(fake.configureArgsForCall)
}

func (fake *FakeResourceManager) ConfigureCalls(stub func(*v1beta1.RabbitmqCluster) ([]generator.TargetResource, error)) {
	fake.configureMutex.Lock()
	defer fake.configureMutex.Unlock()
	fake.ConfigureStub = stub
}

func (fake *FakeResourceManager) ConfigureArgsForCall(i int) *v1beta1.RabbitmqCluster {
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	argsForCall := fake.configureArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeResourceManager) ConfigureReturns(result1 []generator.TargetResource, result2 error) {
	fake.configureMutex.Lock()
	defer fake.configureMutex.Unlock()
	fake.ConfigureStub = nil
	fake.configureReturns = struct {
		result1 []generator.TargetResource
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceManager) ConfigureReturnsOnCall(i int, result1 []generator.TargetResource, result2 error) {
	fake.configureMutex.Lock()
	defer fake.configureMutex.Unlock()
	fake.ConfigureStub = nil
	if fake.configureReturnsOnCall == nil {
		fake.configureReturnsOnCall = make(map[int]struct {
			result1 []generator.TargetResource
			result2 error
		})
	}
	fake.configureReturnsOnCall[i] = struct {
		result1 []generator.TargetResource
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResourceManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resourcemanager.ResourceManager = new(FakeResourceManager)
