// Code generated by counterfeiter. DO NOT EDIT.
package reconcilersfakes

import (
	"context"
	"sync"

	"github.com/pivotal/rabbitmq-for-kubernetes/pkg/internal/reconcilers"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
)

type FakeRepository struct {
	CreateStub        func(context.Context, runtime.Object) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 runtime.Object
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(context.Context, types.NamespacedName, runtime.Object) error
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 types.NamespacedName
		arg3 runtime.Object
	}
	getReturns struct {
		result1 error
	}
	getReturnsOnCall map[int]struct {
		result1 error
	}
	SetControllerReferenceStub        func(v1.Object, v1.Object) error
	setControllerReferenceMutex       sync.RWMutex
	setControllerReferenceArgsForCall []struct {
		arg1 v1.Object
		arg2 v1.Object
	}
	setControllerReferenceReturns struct {
		result1 error
	}
	setControllerReferenceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) Create(arg1 context.Context, arg2 runtime.Object) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 runtime.Object
	}{arg1, arg2})
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createReturns
	return fakeReturns.result1
}

func (fake *FakeRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeRepository) CreateCalls(stub func(context.Context, runtime.Object) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeRepository) CreateArgsForCall(i int) (context.Context, runtime.Object) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepository) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) Get(arg1 context.Context, arg2 types.NamespacedName, arg3 runtime.Object) error {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 types.NamespacedName
		arg3 runtime.Object
	}{arg1, arg2, arg3})
	fake.recordInvocation("Get", []interface{}{arg1, arg2, arg3})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1
}

func (fake *FakeRepository) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeRepository) GetCalls(stub func(context.Context, types.NamespacedName, runtime.Object) error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeRepository) GetArgsForCall(i int) (context.Context, types.NamespacedName, runtime.Object) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRepository) GetReturns(result1 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) GetReturnsOnCall(i int, result1 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) SetControllerReference(arg1 v1.Object, arg2 v1.Object) error {
	fake.setControllerReferenceMutex.Lock()
	ret, specificReturn := fake.setControllerReferenceReturnsOnCall[len(fake.setControllerReferenceArgsForCall)]
	fake.setControllerReferenceArgsForCall = append(fake.setControllerReferenceArgsForCall, struct {
		arg1 v1.Object
		arg2 v1.Object
	}{arg1, arg2})
	fake.recordInvocation("SetControllerReference", []interface{}{arg1, arg2})
	fake.setControllerReferenceMutex.Unlock()
	if fake.SetControllerReferenceStub != nil {
		return fake.SetControllerReferenceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setControllerReferenceReturns
	return fakeReturns.result1
}

func (fake *FakeRepository) SetControllerReferenceCallCount() int {
	fake.setControllerReferenceMutex.RLock()
	defer fake.setControllerReferenceMutex.RUnlock()
	return len(fake.setControllerReferenceArgsForCall)
}

func (fake *FakeRepository) SetControllerReferenceCalls(stub func(v1.Object, v1.Object) error) {
	fake.setControllerReferenceMutex.Lock()
	defer fake.setControllerReferenceMutex.Unlock()
	fake.SetControllerReferenceStub = stub
}

func (fake *FakeRepository) SetControllerReferenceArgsForCall(i int) (v1.Object, v1.Object) {
	fake.setControllerReferenceMutex.RLock()
	defer fake.setControllerReferenceMutex.RUnlock()
	argsForCall := fake.setControllerReferenceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepository) SetControllerReferenceReturns(result1 error) {
	fake.setControllerReferenceMutex.Lock()
	defer fake.setControllerReferenceMutex.Unlock()
	fake.SetControllerReferenceStub = nil
	fake.setControllerReferenceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) SetControllerReferenceReturnsOnCall(i int, result1 error) {
	fake.setControllerReferenceMutex.Lock()
	defer fake.setControllerReferenceMutex.Unlock()
	fake.SetControllerReferenceStub = nil
	if fake.setControllerReferenceReturnsOnCall == nil {
		fake.setControllerReferenceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setControllerReferenceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.setControllerReferenceMutex.RLock()
	defer fake.setControllerReferenceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reconcilers.Repository = new(FakeRepository)
