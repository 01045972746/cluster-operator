---
resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
# https://github.com/concourse/git-resource
- name: &repo rabbitmq-for-kubernetes
  type: git
  source:
    uri: git@github.com:pivotal/rabbitmq-for-kubernetes
    branch: master
    private_key: |
      ((operator-git-ssh-key))

- name: rabbitmq-for-kubernetes-broker
  type: git
  source:
    uri: git@github.com:pivotal/rabbitmq-for-kubernetes-broker
    branch: master
    private_key: |
      ((broker-git-ssh-key))

# https://github.com/concourse/docker-image-resource
- name: &operator-image-rc rabbitmq-k8s-operator-rc
  type: docker-image
  source:
    repository: eu.gcr.io/cf-rabbitmq-for-k8s-bunny/rabbitmq-for-kubernetes-controller
    tag: rc
    username: _json_key
    password: ((gcr-push-service-account-key))

- name: &operator-image-release rabbitmq-k8s-operator-release
  type: docker-image
  source:
    repository: eu.gcr.io/cf-rabbitmq-for-k8s-bunny/rabbitmq-for-kubernetes-controller
    tag: 0.1.0
    username: _json_key
    password: ((gcr-push-service-account-key))

- name: &broker-image-release rabbitmq-k8s-broker-release
  type: docker-image
  source:
    repository: eu.gcr.io/cf-rabbitmq-for-k8s-bunny/rabbitmq-for-kubernetes-servicebroker
    tag: 0.1.0
    username: _json_key
    password: ((gcr-push-service-account-key))

- name: &rabbitmq-release rabbitmq-release
  type: docker-image
  source:
    repository: rabbitmq
    tag: 3.8-rc-management
  version: {digest: "sha256:5d49702395e2c0cf9fa77a46d8fcae5f2107dc9a6dcd87a2c27e0599eba20d18"}

- name: every-friday
  type: time
  source:
    start: 8:00 AM
    stop: 9:00 AM
    days:
    - Friday
    location: Europe/London

- name: rabbitmq-for-kubernetes-pivnet
  type: pivnet
  source:
    api_token: ((pivnet-api-token))
    product_slug: p-rabbitmq-for-kubernetes
    access_key_id: ((pivnet-aws-access-key-id))
    secret_access_key: ((pivnet-aws-secret-access-key))

- name: product-metadata
  type: gcs-resource
  source:
    bucket: rabbitmq-on-k8s-pivnet-metadata
    regexp: metadata-(.*).yml
    json_key: ((gcr-push-service-account-key))

jobs:
- name: integration-tests
  serial: true
  plan:
  - get: *repo
    trigger: true
  - task: run-integration-tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          tag: latest
          repository: eu.gcr.io/cf-rabbitmq-for-k8s-bunny/rabbitmq-for-kubernetes-ci
          username: _json_key
          password: ((gcr-push-service-account-key))
      inputs:
      - name: *repo
        path: /go/src/github.com/pivotal/rabbitmq-for-kubernetes
      run:
        path: bash
        args:
        - -exc
        - |
          cd go/src/github.com/pivotal/rabbitmq-for-kubernetes
          echo "Running unit tests"
          make unit-tests
          echo "Running integration tests"
          make integration-tests

- name: build-operator-final
  serial: true
  serial_groups: [build-operator]
  plan:
  - get: *operator-image-rc
    params:
      save: true
  - get: *repo
    passed: [broker-system-tests]
    trigger: true
  - put: *operator-image-rc
    params:
      load: *operator-image-rc
      tag_file: rabbitmq-for-kubernetes/.version
      tag_as_latest: true

- name: build-operator
  serial: true
  serial_groups: [build-operator]
  plan:
  - get: *repo
    passed: [integration-tests]
    trigger: true
  - task: build-labels
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          tag: latest
          repository: eu.gcr.io/cf-rabbitmq-for-k8s-bunny/rabbitmq-for-kubernetes-ci
          username: _json_key
          password: ((gcr-push-service-account-key))
      inputs:
        - name: *repo
      outputs:
        - name: labels
      run:
        path: bash
        args:
        - -ec
        - |
          export COMMIT_SHA=$(cat rabbitmq-for-kubernetes/.git/short_ref)
          echo "{\"commit\": \"$COMMIT_SHA\"}" > ./labels/labels
  - put: *operator-image-rc
    params:
      build: *repo
      tag_file: rabbitmq-for-kubernetes/.rc_version
      additional_tags: rabbitmq-for-kubernetes/.git/short_ref
      tag_as_latest: true
      labels_file: labels/labels

- name: operator-system-tests
  serial: true
  serial_groups: [build-operator]
  plan:
  - get: *repo
    passed: [build-operator]
    trigger: true
  - task: run-system-tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          tag: latest
          repository: eu.gcr.io/cf-rabbitmq-for-k8s-bunny/rabbitmq-for-kubernetes-ci
          username: _json_key
          password: ((gcr-pull-service-account-key))
      inputs:
      - name: *repo
        path: /go/src/github.com/pivotal/rabbitmq-for-kubernetes
      params:
        # To use the right value for TERM, check what terms are available in the image: find /lib/terminfo -type f
        # To double-check that a specific term is available, run: infocmp xterm-256color
        TERM: xterm-256color
        KUBECTL_SECRET_TOKEN: ((rmq-k8s-ci-kubectl-service-account-key))
        KUBECTL_SECRET_TOKEN_PATH: kubectl-secret-token.json
        GCR_VIEWER_KEY_CI: ((gcr-pull-service-account-key))
        K8S_OPERATOR_NAMESPACE: pivotal-rabbitmq-system-ci
        CI_CLUSTER: ci-bunny
        GCP_PROJECT: cf-rabbitmq-for-k8s-bunny
      run:
        path: bash
        args:
        - -exc
        - |
          set +x
          echo "Outputting kubectl token to a file"
          echo -n $KUBECTL_SECRET_TOKEN > $KUBECTL_SECRET_TOKEN_PATH
          set -x

          export KUBECTL_SECRET_TOKEN_PATH=$PWD/$KUBECTL_SECRET_TOKEN_PATH
          cd go/src/github.com/pivotal/rabbitmq-for-kubernetes
          export CONTROLLER_IMAGE_TAG=$(cat .git/short_ref)
          echo "Clearing old environment"
          make destroy-ci
          echo "Deploying ci environment"
          make deploy-ci
          echo "Testing single node cluster..."
          make system-tests-ci

- name: broker-system-tests
  serial: true
  serial_groups: [build-operator]
  plan:
  - get: rabbitmq-for-kubernetes-broker
  - get: *repo
    passed: [operator-system-tests]
    trigger: true
  - task: run-broker-system-tests
    on_success:
      task: destroy-ci
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            tag: latest
            repository: eu.gcr.io/cf-rabbitmq-for-k8s-bunny/rabbitmq-for-kubernetes-ci
            username: _json_key
            password: ((gcr-push-service-account-key))
        inputs:
        - name: *repo
          path: /go/src/github.com/pivotal/rabbitmq-for-kubernetes
        - name: rabbitmq-for-kubernetes-broker
          path: /go/src/github.com/pivotal/rabbitmq-for-kubernetes-broker
        params:
          # To use the right value for TERM, check what terms are available in the image: find /lib/terminfo -type f
          # To double-check that a specific term is available, run: infocmp xterm-256color
          TERM: xterm-256color
          KUBECTL_SECRET_TOKEN: ((rmq-k8s-ci-kubectl-service-account-key))
          KUBECTL_SECRET_TOKEN_PATH: kubectl-secret-token.json
          CI_CLUSTER: ci-bunny
          GCP_PROJECT: cf-rabbitmq-for-k8s-bunny
        run:
          path: bash
          args:
          - -exc
          - |
            set +x
            echo "Outputting kubectl token to a file"
            echo -n $KUBECTL_SECRET_TOKEN > $KUBECTL_SECRET_TOKEN_PATH
            set -x
            export KUBECTL_SECRET_TOKEN_PATH=$PWD/$KUBECTL_SECRET_TOKEN_PATH
            pushd go/src/github.com/pivotal/rabbitmq-for-kubernetes
            echo "Destroying operator ci environment"
            make destroy-ci
            popd
            pushd go/src/github.com/pivotal/rabbitmq-for-kubernetes-broker
            echo "Destroying broker ci environment"
            make destroy-ci
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          tag: latest
          repository: eu.gcr.io/cf-rabbitmq-for-k8s-bunny/rabbitmq-for-kubernetes-ci
          username: _json_key
          password: ((gcr-pull-service-account-key))
      inputs:
      - name: rabbitmq-for-kubernetes-broker
        path: /go/src/github.com/pivotal/rabbitmq-for-kubernetes-broker
      - name: *repo
        path: /go/src/github.com/pivotal/rabbitmq-for-kubernetes
      params:
        TERM: xterm-256color
        GCR_VIEWER_KEY_CI: ((gcr-pull-service-account-key))
        OPERATOR_PRIVATE_KEY: ((operator-git-ssh-key))
        KUBECTL_SECRET_TOKEN: ((rmq-k8s-ci-kubectl-service-account-key))
        K8S_BROKER_NAMESPACE: pivotal-rabbitmq-servicebroker-system-ci
        K8S_OPERATOR_NAMESPACE: pivotal-rabbitmq-system-ci
        KUBECTL_SECRET_TOKEN_PATH: kubectl-secret-token.json
        CI_CLUSTER: ci-bunny
        GCP_PROJECT: cf-rabbitmq-for-k8s-bunny
      run:
        path: bash
        args:
        - -exc
        - |
          # for accessing private repos
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          # for trusting github.com without prompt
          mkdir -p ${HOME}/.ssh
          set +x
          echo "${OPERATOR_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Outputting kubectl token to a file"
          echo -n $KUBECTL_SECRET_TOKEN > $KUBECTL_SECRET_TOKEN_PATH
          set -x

          export KUBECTL_SECRET_TOKEN_PATH=$PWD/$KUBECTL_SECRET_TOKEN_PATH
          gcloud auth activate-service-account --key-file=${KUBECTL_SECRET_TOKEN_PATH}
          gcloud container clusters get-credentials ${CI_CLUSTER} --region europe-west1 --project ${GCP_PROJECT}
          ssh-keyscan -H github.com > ~/.ssh/known_hosts

          pushd go/src/github.com/pivotal/rabbitmq-for-kubernetes
          export CONTROLLER_IMAGE_TAG=$(cat .git/short_ref)
          echo "Clearing existing operator resources"
          make destroy-ci
          echo "Deploying operator"
          make deploy-ci
          popd

          pushd go/src/github.com/pivotal/rabbitmq-for-kubernetes-broker
          echo "Clearing any existing broker resources"
          make destroy-ci

          echo "Deploying broker"
          make deploy-ci
          kubectl -n pivotal-rabbitmq-servicebroker-system-ci wait pod -l app=servicebroker --for=condition=Ready --timeout=2m
          kubectl -n pivotal-rabbitmq-servicebroker-system-ci port-forward service/p-rmq-servicebroker-ci 8080:8080 > /dev/null &
          ginkgo -r integration_tests/
          kill %1

- name: renew-env
  serial: true
  plan:
  - get: every-friday
    trigger: true
  - task: renew-toolsmith-environment
    tags: [toolsmiths-shared-vsphere]
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          tag: latest
          repository: eu.gcr.io/cf-rabbitmq-for-k8s-bunny/rabbitmq-for-kubernetes-ci
          username: _json_key
          password: ((gcr-push-service-account-key))
      params:
        TOKEN: ((toolsmith-api-token))
      run:
        path: bash
        args:
        - -ec
        - |
          echo "curling https://environments.toolsmiths.cf-app.com/custom_gcp_environments/20/renew"
          curl -H "Authorization: OAuth ${TOKEN}" https://environments.toolsmiths.cf-app.com/custom_gcp_environments/20/renew

- name: upload-pivnet
  serial: true
  plan:
  - get: *repo
  - get: rabbitmq-for-kubernetes-broker
  - get: *operator-image-release
    params:
      save: true
      rootfs: true
  - get: *broker-image-release
    params:
      save: true
      rootfs: true
  - get: *rabbitmq-release
    params:
      save: true
      rootfs: true
  - get: product-metadata
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          tag: latest
          repository: eu.gcr.io/cf-rabbitmq-for-k8s-bunny/rabbitmq-for-kubernetes-ci
          username: _json_key
          password: ((gcr-pull-service-account-key))
      inputs:
      - name: *operator-image-release
      - name: *repo
      - name: rabbitmq-for-kubernetes-broker
      - name: *rabbitmq-release
      - name: *broker-image-release
      outputs:
      - name: product-release
      run:
        path: bash
        args:
        - -ec
        - |
          echo "creating tarball"
          mkdir images manifests
          mv rabbitmq-k8s-operator-release/image images/rabbitmq-for-kubernetes-controller-0.1.0
          mv rabbitmq-k8s-broker-release/image images/rabbitmq-for-kubernetes-servicebroker-0.1.0
          mv rabbitmq-release/image images/rabbitmq-3.8-rc-management

          controller_short_ref=$(jq -r '.[0].Config.Labels["commit"]' rabbitmq-k8s-operator-release/docker_inspect.json)
          pushd rabbitmq-for-kubernetes/
          git checkout $controller_short_ref
          make generate-installation-manifests
          mv installation/* ../manifests/
          popd

          broker_short_ref=$(jq -r '.[0].Config.Labels["commit"]' rabbitmq-k8s-broker-release/docker_inspect.json)
          pushd rabbitmq-for-kubernetes-broker/
          git checkout $broker_short_ref
          make generate-installation-manifests
          mv installation/* ../manifests/
          popd

          tar -czf rabbitmq-for-kubernetes-0.1.0.tar images manifests
          mv rabbitmq-for-kubernetes-0.1.0.tar product-release/
  - put: rabbitmq-for-kubernetes-pivnet
    params:
      file_glob: product-release/rabbitmq-for-kubernetes-*.tar
      metadata_file: product-metadata/metadata-0.1.0.yml
